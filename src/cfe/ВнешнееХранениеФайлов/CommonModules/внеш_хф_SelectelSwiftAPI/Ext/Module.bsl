Функция БазовыйАдрес() Экспорт
	
	Возврат "https://api.selcdn.ru/v1/";
	
КонецФункции

Функция ПолныйПутьТома(ТомХранения) Экспорт
	
	СтрокаПутьТома = ""
	+ БазовыйАдрес()
	+ "SEL_" 
	+ ТомХранения.внеш_хф_selectel_НомерУчётнойЗаписи 
	+ "/" 
	+ ТомХранения.внеш_хф_selectel_container;
	
	Возврат СтрокаПутьТома;
	
КонецФункции

Функция ПолучитьИмяОбмена()
	
	Возврат "SelectelSwiftAPI";
	
КонецФункции

Процедура СообщитьОбОшибке(Комментарий, Уровень = "", Данные = Неопределено) Экспорт
	
	Если Уровень = "" Тогда
		
		Уровень = УровеньЖурналаРегистрации.Ошибка;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ПолучитьИмяОбмена(),,,,Комментарий);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "" + Комментарий;
	Сообщение.Сообщить();
	
КонецПроцедуры

//--

Функция ПолучитьКлюч(ТомХранения)
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Auth-User", ТомХранения.внеш_хф_selectel_auth_user);
	Заголовки.Вставить("X-Auth-Key", ТомХранения.внеш_хф_selectel_auth_password);
	
	Ответ = GET("https://api.selcdn.ru/auth/v1.0", Заголовки);
	
	Если Ответ.КодСостояния = 204 Тогда
		
		Возврат Ответ.Заголовки.Получить("X-Auth-Token");
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьЗаголовокАутентификации(ТомХранения, Отказ)
	
	Ключ = ПолучитьКлюч(ТомХранения);
	
	Если ПустаяСтрока(Ключ) Тогда
		 Отказ = Истина;
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Auth-Token", Ключ);
	
	Возврат Заголовки;
	
КонецФункции

//--

Функция СкачиваниеФайлаИзКонтейнера(СтрокаАдрес, ТомХранения, Отказ) Экспорт
	
	Заголовки = ПолучитьЗаголовокАутентификации(ТомХранения, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = GET(СтрокаАдрес, Заголовки);
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат Ответ.ПолучитьТелоКакДвоичныеДанные();
	КонецЕсли;
	
	Отказ = Истина;
	Возврат Неопределено;
	
КонецФункции

Процедура ЗагрузкаФайлаВКонтейнер(СтрокаАдрес, ДвоичныеДанные, ТомХранения, Отказ) Экспорт
	
	
	Заголовки = ПолучитьЗаголовокАутентификации(ТомХранения, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = PUT(СтрокаАдрес, Заголовки, ДвоичныеДанные);
	
	Если НЕ Ответ.КодСостояния = 201 Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура УдалениеФайла(СтрокаАдрес, ТомХранения, Отказ) Экспорт
	
	Заголовки = ПолучитьЗаголовокАутентификации(ТомХранения, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = DELETE(СтрокаАдрес, Заголовки);
	
	Если НЕ (Ответ.КодСостояния = 204 ИЛИ Ответ.КодСостояния = 404) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КопированиеФайловВнутриХранилища(СтрокаАдрес, СтрокаАдресИсточник, ТомХранения, Отказ) Экспорт
	
	Заголовки = ПолучитьЗаголовокАутентификации(ТомХранения, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = GET(СтрокаАдресИсточник, Заголовки);
	
	Если Ответ.КодСостояния = 200 Тогда
		ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Ответ = PUT(СтрокаАдрес, Заголовки, ДвоичныеДанные);
	
	Если НЕ Ответ.КодСостояния = 201 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьФайлСуществует(ИмяФайла, ТомХранения) Экспорт
	
	Отказ = Ложь;
	
	Заголовки = ПолучитьЗаголовокАутентификации(ТомХранения, Отказ);
	
	Если Отказ Тогда
		Возврат Истина;
	КонецЕсли;
		
	Ответ = HEAD(ИмяФайла, Заголовки);
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции


//--

Функция GET(СтрокаАдресСайта, Заголовки) Экспорт
	
	HTTPСтруктура = ПолучитьHTTPСтруктура(СтрокаАдресСайта, Заголовки);
	
	HTTPЗапрос = HTTPСтруктура.HTTPЗапрос;
	HTTPСоединение = HTTPСтруктура.HTTPСоединение;
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
		
	Исключение
		
		СообщитьОбОшибке(ОписаниеОшибки());
		Отказ = Истина;
		HTTPОтвет = Новый Структура;
		HTTPОтвет.Вставить("КодСостояния", 500);
		
	КонецПопытки;
	
	ПроверитьНаКодыОшибок(HTTPОтвет, "GET " + СтрокаАдресСайта);
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция HEAD(СтрокаАдресСайта, Заголовки) Экспорт
	
	HTTPСтруктура = ПолучитьHTTPСтруктура(СтрокаАдресСайта, Заголовки);
	
	HTTPЗапрос = HTTPСтруктура.HTTPЗапрос;
	HTTPСоединение = HTTPСтруктура.HTTPСоединение;
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("HEAD", HTTPЗапрос);
		
	Исключение
		
		СообщитьОбОшибке(ОписаниеОшибки());
		Отказ = Истина;
		HTTPОтвет = Новый Структура;
		HTTPОтвет.Вставить("КодСостояния", 500);
		
	КонецПопытки;
	
	ПроверитьНаКодыОшибок(HTTPОтвет, "HEAD " + СтрокаАдресСайта);
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция POST(СтрокаАдресСайта, Заголовки, ДвоичныеДанные) Экспорт
	
	HTTPСтруктура = ПолучитьHTTPСтруктура(СтрокаАдресСайта, Заголовки);
	
	HTTPЗапрос = HTTPСтруктура.HTTPЗапрос;
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	HTTPСоединение = HTTPСтруктура.HTTPСоединение;
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
		
	Исключение
		
		СообщитьОбОшибке(ОписаниеОшибки());
		Отказ = Истина;
		HTTPОтвет = Новый Структура;
		HTTPОтвет.Вставить("КодСостояния", 500);
		
	КонецПопытки;
	
	ПроверитьНаКодыОшибок(HTTPОтвет, "POST " + СтрокаАдресСайта);
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция PUT(СтрокаАдресСайта, Заголовки, ДвоичныеДанные = Неопределено) Экспорт
	
	HTTPСтруктура = ПолучитьHTTPСтруктура(СтрокаАдресСайта, Заголовки);
	
	HTTPЗапрос = HTTPСтруктура.HTTPЗапрос;
	Если ДвоичныеДанные <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	HTTPСоединение = HTTPСтруктура.HTTPСоединение;
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
		
	Исключение
		
		СообщитьОбОшибке(ОписаниеОшибки());
		Отказ = Истина;
		HTTPОтвет = Новый Структура;
		HTTPОтвет.Вставить("КодСостояния", 500);
		
	КонецПопытки;
	
	ПроверитьНаКодыОшибок(HTTPОтвет, "PUT " + СтрокаАдресСайта);
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция DELETE(СтрокаАдресСайта, Заголовки) Экспорт
	
	HTTPСтруктура = ПолучитьHTTPСтруктура(СтрокаАдресСайта, Заголовки);
	
	HTTPЗапрос = HTTPСтруктура.HTTPЗапрос;
	HTTPСоединение = HTTPСтруктура.HTTPСоединение;
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("DELETE", HTTPЗапрос);
		
	Исключение
		
		СообщитьОбОшибке(ОписаниеОшибки());
		Отказ = Истина;
		HTTPОтвет = Новый Структура;
		HTTPОтвет.Вставить("КодСостояния", 500);
		
	КонецПопытки;
	
	ПроверитьНаКодыОшибок(HTTPОтвет, "DELETE " + СтрокаАдресСайта);
	
	Возврат HTTPОтвет;
	
КонецФункции



Процедура ПроверитьНаКодыОшибок(HTTPОтвет, ОписаниеЗапроса)
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если КодСостояния = 301
		ИЛИ КодСостояния = 302 
		ИЛИ КодСостояния = 501 
		ИЛИ КодСостояния = 401
		ИЛИ КодСостояния = 500
		Тогда
		
		СообщитьОбОшибке(ОписаниеЗапроса + Символы.ПС + "КодСостояния: " + КодСостояния);
		
		Отказ = Истина;
		
	ИначеЕсли КодСостояния = 400 
		//ИЛИ КодСостояния = 404
		Тогда 
		
		СообщитьОбОшибке(ОписаниеЗапроса + Символы.ПС + "КодСостояния: " + КодСостояния);
		
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьHTTPСтруктура(СтрокаАдресСайта, Заголовки)
	
	Отказ = Ложь;
	
	НастройкиПодключения = РазобратьАдресСайта(СтрокаАдресСайта, Отказ);
	
	Если НастройкиПодключения.ЗащищенноеСоединение Тогда
		
		ssl4 = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
		HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.Сервер, НастройкиПодключения.Порт,,,,,ssl4);
		
	Иначе
		HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.Сервер, НастройкиПодключения.Порт,,,,,);	
	КонецЕсли;
	
		
	HTTPЗапрос = Новый HTTPЗапрос(НастройкиПодключения.АдресРесурса, Заголовки);
	
	HTTPСтруктура = Новый Структура;
	HTTPСтруктура.Вставить("HTTPСоединение", HTTPСоединение);
	HTTPСтруктура.Вставить("HTTPЗапрос", HTTPЗапрос);
	
	Возврат HTTPСтруктура; 
	
КонецФункции

Функция РазобратьАдресСайта(Знач СтрокаАдресСайта, ОписаниеОшибки)
	
	Сервер = ""; 
	Порт = 0;
	ЗащищенноеСоединение = Ложь;
	
	НастройкиПодключения = Новый Структура;
	
	Если НЕ ПустаяСтрока(СтрокаАдресСайта) Тогда
		
		СтрокаАдресСайта = СтрЗаменить(СтрокаАдресСайта, "\", "/");
		СтрокаАдресСайта = СтрЗаменить(СтрокаАдресСайта, " ", "");
		
		Если НРег(Лев(СтрокаАдресСайта, 7)) = "http://" Тогда
			СтрокаАдресСайта = Сред(СтрокаАдресСайта, 8);
		ИначеЕсли НРег(Лев(СтрокаАдресСайта, 8)) = "https://" Тогда
			СтрокаАдресСайта = Сред(СтрокаАдресСайта, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = СтрНайти(СтрокаАдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(СтрокаАдресСайта, ПозицияСлэша - 1);
			АдресРесурса = КодироватьСтроку(Прав(СтрокаАдресСайта, СтрДлина(СтрокаАдресСайта) - ПозицияСлэша), СпособКодированияСтроки.КодировкаURL);
		Иначе	
			Сервер = СтрокаАдресСайта;
			АдресРесурса = "";
		КонецЕсли;
		
		ПозицияДвоеточия = СтрНайти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
		
			//ДобавитьОписаниеОшибки(ОписаниеОшибки,
			//	ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось получить номер порта:'")
			//		+ " " + ПортСтрока + Символы.ПС
			//		+ НСтр("ru = 'Проверьте правильность ввода адреса сайта.'")));
			//	
			//Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
		
	НастройкиПодключения.Вставить("Сервер", Сервер); 
	НастройкиПодключения.Вставить("Порт", Порт);
	НастройкиПодключения.Вставить("АдресРесурса", АдресРесурса);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат НастройкиПодключения;
	
КонецФункции

//--

Функция В_JSON(СоответствиеДанные, Отказ = Ложь) Экспорт
	
	//ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	//
	//ИмяФайла = ПолучитьИмяВременногоФайла("json");
	//ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.ОткрытьФайл(ИмяФайла,,, ПараметрыЗаписиJSON);
	//ЗаписатьJSON(ЗаписьJSON, СоответствиеДанные);
	//ЗаписьJSON.Закрыть();
	//
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = "" + ИмяФайла;
	//Сообщение.Сообщить();
	
	//--
	
	Попытка
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, СоответствиеДанные);
		
		СтрокаДанные = ЗаписьJSON.Закрыть();
		
		Возврат СтрокаДанные;
		
	Исключение
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка сериализации JSON " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ИЗ_JSON(Строка_JSON, Отказ = Ложь) Экспорт
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Строка_JSON);
		
		Возврат ПрочитатьJSON(ЧтениеJSON, Истина);
		
	Исключение
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка разбора JSON " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	
КонецФункции

//--




