&Вместо("ДобавитьФайл")
Процедура внеш_хф_ДобавитьФайл(ПрисоединенныйФайл,
	ДвоичныеДанныеИлиПуть,
	ДатаДляРазмещенияВТоме = Неопределено,
	ЗаполнятьСлужебныйРеквизитХранилище = Ложь,
	ТомДляРазмещенияДанных = Неопределено) Экспорт
	
	ОжидаемыеТипы = Новый Массив;
	ОжидаемыеТипы.Добавить(Тип("ДвоичныеДанные"));
	ОжидаемыеТипы.Добавить(Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайламиСлужебный.ДобавитьФайлВТом",
		"ДвоичныеДанныеИлиПуть", ДвоичныеДанныеИлиПуть, Новый ОписаниеТипов(ОжидаемыеТипы));
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("Структура")
		И Не ЗначениеЗаполнено(ПрисоединенныйФайл.Ссылка) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнено значение свойства %1 в параметре %2 (Структура) в процедуре %3.'"),
			"Ссылка",
			"ПрисоединенныйФайл",
			"РаботаСФайламиВТомахСлужебный.ДобавитьФайл");
		
	КонецЕсли;
	
	Если ТипЗнч(ДвоичныеДанныеИлиПуть) = Тип("Строка") Тогда
		
		ФайлНаДиске = Новый Файл(ДвоичныеДанныеИлиПуть);
		Если ФайлНаДиске.Существует() Тогда
			РазмерФайла = ФайлНаДиске.Размер();
			РасширениеФайла = СтрЗаменить(ФайлНаДиске.Расширение, ".", "");
		Иначе
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось добавить файл ""%1"" ни в один из томов, т.к. он отсутствует.
				|Возможно, файл удален антивирусной программой.
				|Обратитесь к администратору.'"),
				ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение);
				
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	Иначе
		РазмерФайла = ДвоичныеДанныеИлиПуть.Размер();
		РасширениеФайла = СтрЗаменить(ПрисоединенныйФайл.Расширение, ".", "");
	КонецЕсли;
	
	Если ТипХраненияФайла(РасширениеФайла, РазмерФайла) = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		//--
		внеш_хф_ЗаписатьФайлВИнформационнуюБазу(ПрисоединенныйФайл, ДвоичныеДанныеИлиПуть, ЗаполнятьСлужебныйРеквизитХранилище);
		//--
				
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл.Ссылка) Тогда
		РаботаСФайламиСлужебный.УдалитьЗаписьИзРегистраДвоичныеДанныеФайлов(ПрисоединенныйФайл.Ссылка);
	КонецЕсли;
	
	ТомХранения = ?(ТомДляРазмещенияДанных = Неопределено, СвободныйТом(РазмерФайла), ТомДляРазмещенияДанных);
	Если ТомХранения = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось добавить файл ""%1"" ни в один из томов, т.к. в томах недостаточно места.'"),
			ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение);
			
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ПрисоединенныйФайл.Том = ТомХранения;
	ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
	
	СвойстваФайла = СвойстваФайлаВТоме();
	ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайл);
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		СвойстваФайла.ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПрисоединенныйФайл.Владелец, "ВладелецФайла");
	КонецЕсли;
	
	Если ТомХранения.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.СетеваяПапка 
		ИЛИ НЕ ЗначениеЗаполнено(ТомХранения.внеш_хф_ТипХранилища) Тогда
		
		внеш_хф_ЗаписатьФайлВСетеваяПапка(ПрисоединенныйФайл, ТомХранения, СвойстваФайла, ДатаДляРазмещенияВТоме, ДвоичныеДанныеИлиПуть, ЗаполнятьСлужебныйРеквизитХранилище);
		
	ИначеЕсли ТомХранения.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.SelectelSwiftAPI Тогда
		
		внеш_хф_ЗаписатьФайлВКонтейнер(ПрисоединенныйФайл, ТомХранения, СвойстваФайла, ДатаДляРазмещенияВТоме, ДвоичныеДанныеИлиПуть, ЗаполнятьСлужебныйРеквизитХранилище);
		
	КонецЕсли;
	
	
КонецПроцедуры

&Вместо("ДанныеФайла")
Функция внеш_хф_ДанныеФайла(ПрисоединенныйФайл, Знач ВызыватьИсключение = Истина) Экспорт
	
	СвойстваФайла = СвойстваФайлаВТоме(ПрисоединенныйФайл);
	
	Если ПрисоединенныйФайл.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.СетеваяПапка 
		ИЛИ НЕ ЗначениеЗаполнено(ПрисоединенныйФайл.Том.внеш_хф_ТипХранилища) Тогда
		
		Возврат внеш_хф_ДанныеФайлаСетеваяПапка(ПрисоединенныйФайл, СвойстваФайла, ВызыватьИсключение);
		
	ИначеЕсли ПрисоединенныйФайл.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.SelectelSwiftAPI Тогда
		
		Возврат внеш_хф_ДанныеФайлаКонтейнер(ПрисоединенныйФайл, СвойстваФайла, ВызыватьИсключение);
		
	КонецЕсли;
	
	
	
КонецФункции

&Вместо("ОбновитьФайл")
Процедура внеш_хф_ОбновитьФайл(ПрисоединенныйФайлОбъект, ДвоичныеДанные) Экспорт
	
	Попытка
		
		СвойстваФайла = СвойстваФайлаВТоме();
		ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайлОбъект);
		
		ПутьКФайлу = ПолноеИмяФайлаВТоме(СвойстваФайла);
		
		//--
		
		Если СвойстваФайла.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.СетеваяПапка 
			ИЛИ НЕ ЗначениеЗаполнено(СвойстваФайла.Том.внеш_хф_ТипХранилища) Тогда
			
			внеш_хф_УдалитьФайлСетеваяПапка(ПутьКФайлу);
			
		ИначеЕсли СвойстваФайла.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.SelectelSwiftAPI Тогда
			
			внеш_хф_УдалитьФайлКонтейнер(ПутьКФайлу, СвойстваФайла.Том);
			
		КонецЕсли;
		
		//--
		
		ДобавитьФайл(ПрисоединенныйФайлОбъект, ДвоичныеДанные);
		ПрисоединенныйФайлОбъект.Записать();
		
	Исключение
		
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайлОбъект.Ссылка;
		ТекстОшибки = НСтр("ru = 'Ошибка, при сохранении файла в томе:
			|""%1"".
			|
			|Ссылка на файл: ""%2"".'");
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Запись файла на диск'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники[ПрисоединенныйФайлСсылка.Метаданные().Имя],
			ПрисоединенныйФайлСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ПрисоединенныйФайлСсылка));
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ПрисоединенныйФайлСсылка);
		
	КонецПопытки;
	
КонецПроцедуры


&Вместо("УдалитьДанныеФайла")
Процедура внеш_хф_УдалитьДанныеФайла(ПрисоединенныйФайлОбъект, ТекстКомментария = "") Экспорт
	
	ПрисоединенныйФайлОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	ПрисоединенныйФайлОбъект.ПутьКФайлу = "";
	ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
	Если ТипЗнч(ПрисоединенныйФайлОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		ПрисоединенныйФайлОбъект.Комментарий = ТекстКомментария + ПрисоединенныйФайлОбъект.Комментарий;
	Иначе
		ПрисоединенныйФайлОбъект.Описание = ТекстКомментария + ПрисоединенныйФайлОбъект.Описание;
	КонецЕсли;
	ПрисоединенныйФайлОбъект.Записать();
	
	СвойстваФайла = СвойстваФайлаВТоме();
	ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайлОбъект);
	
	
	Если СвойстваФайла.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.СетеваяПапка 
		ИЛИ НЕ ЗначениеЗаполнено(СвойстваФайла.Том.внеш_хф_ТипХранилища) Тогда
		
		внеш_хф_УдалитьФайлСетеваяПапка(ПолноеИмяФайлаВТоме(СвойстваФайла));
		
	ИначеЕсли СвойстваФайла.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.SelectelSwiftAPI Тогда
		
		внеш_хф_УдалитьФайлКонтейнер(ПолноеИмяФайлаВТоме(СвойстваФайла), СвойстваФайла.Том);
		
	КонецЕсли;
	
КонецПроцедуры

&Вместо("СкопироватьФайл")
Процедура внеш_хф_СкопироватьФайл(ПрисоединенныйФайл, Путь) Экспорт
	
	СвойстваФайла = СвойстваФайлаВТоме(ПрисоединенныйФайл);
	
	Если СвойстваФайла.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.СетеваяПапка 
		ИЛИ НЕ ЗначениеЗаполнено(СвойстваФайла.Том.внеш_хф_ТипХранилища) Тогда
		
		//--
		
		КопироватьФайл(ПолноеИмяФайлаВТоме(СвойстваФайла), Путь);
		
		// Исходному файлу мог быть установлен атрибут "Только чтение".
		// Унаследованный при копировании атрибут снимается, чтобы файл можно было удалить.
		СвойстваФайла = Новый Файл(Путь);
		Если СвойстваФайла.Существует()
			И СвойстваФайла.ПолучитьТолькоЧтение() Тогда
			
			СвойстваФайла.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
		//--
		
	ИначеЕсли СвойстваФайла.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.SelectelSwiftAPI Тогда
		
		внеш_хф_SelectelSwiftAPI.КопированиеФайловВнутриХранилища(Путь, ПолноеИмяФайлаВТоме(СвойстваФайла));
		
	КонецЕсли;

	
		
КонецПроцедуры

&Вместо("ПереименоватьФайл")
Процедура внеш_хф_ПереименоватьФайл(ПрисоединенныйФайл, НовоеИмя,
	СтароеИмя = "", УникальныйИдентификатор = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(
			Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл)).ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ПрисоединенныйФайл);
		БлокировкаДанных.Заблокировать();
		
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПрисоединенныйФайл, , УникальныйИдентификатор);
		
		СвойстваФайла = СвойстваФайлаВТоме();
		ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайлОбъект);
		
		ПутьКТому = ПолныйПутьТома(ПрисоединенныйФайлОбъект.Том);
		ТекущийПутьКФайлу = ПолноеИмяФайлаВТоме(СвойстваФайла);
		
		//--
		
		Если СвойстваФайла.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.СетеваяПапка 
			ИЛИ НЕ ЗначениеЗаполнено(СвойстваФайла.Том.внеш_хф_ТипХранилища) Тогда
			
			ФайлНаДиске = Новый Файл(ТекущийПутьКФайлу);
			ИмяДляЗамены = ?(ПустаяСтрока(СтароеИмя), ПрисоединенныйФайлОбъект.Наименование, СтароеИмя);
			НовыйПутьКФайлу = ФайлНаДиске.Путь
			+ СтрЗаменить(ФайлНаДиске.ИмяБезРасширения, ИмяДляЗамены, НовоеИмя)
			+ ФайлНаДиске.Расширение;
			
			
			ПереместитьФайл(ТекущийПутьКФайлу, НовыйПутьКФайлу);
			
		ИначеЕсли СвойстваФайла.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.SelectelSwiftAPI Тогда
			
			Отказ = Ложь;
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущийПутьКФайлу, "/");
			ИмяФайлаТекущее = МассивПодстрок[МассивПодстрок.ВГраница()];
			
			ИмяФайлаНовое = СтрЗаменить(ИмяФайлаТекущее, ПрисоединенныйФайлОбъект.Наименование, НовоеИмя);
			
			НовыйПутьКФайлу = СтрЗаменить(ТекущийПутьКФайлу, ИмяФайлаТекущее, ИмяФайлаНовое);
			
			внеш_хф_SelectelSwiftAPI.КопированиеФайловВнутриХранилища(НовыйПутьКФайлу, ТекущийПутьКФайлу, СвойстваФайла.Том, Отказ);
			
			Если Отказ Тогда
				ВызватьИсключение "Ошибка копирования файла из контейнера";
			КонецЕсли;
			
			внеш_хф_SelectelSwiftAPI.УдалениеФайла(ТекущийПутьКФайлу,  СвойстваФайла.Том, Отказ);
			
			Если Отказ Тогда
				ВызватьИсключение "Ошибка удаления файла из контейнера";
			КонецЕсли;
			
		КонецЕсли;
		
		//--
		
		ПрисоединенныйФайлОбъект.ПутьКФайлу = СтрЗаменить(НовыйПутьКФайлу, ПутьКТому, "");
		ПрисоединенныйФайлОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(ПрисоединенныйФайл, УникальныйИдентификатор);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		РазблокироватьДанныеДляРедактирования(ПрисоединенныйФайл, УникальныйИдентификатор);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры


Процедура внеш_хф_УдалитьФайлСетеваяПапка(ПутьКФайлу)
	
	ФайлНаДиске = Новый Файл(ПутьКФайлу);
	Если ФайлНаДиске.Существует() Тогда
		
		КаталогФайла = ФайлНаДиске.Путь;
		ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
		
		Попытка
			
			УдалитьФайлы(ПутьКФайлу);
			
			// Удаляем каталог файла, если после удаления файла каталог стал пустым.
			ФайлыВКаталоге = НайтиФайлы(КаталогФайла, ПолучитьМаскуВсеФайлы());
			Если ФайлыВКаталоге.Количество() = 0 Тогда
				УдалитьФайлы(КаталогФайла);
			КонецЕсли;
			
		Исключение
			
			внеш_хф_ВызватьИсключениеУдалениеФайла();
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура внеш_хф_УдалитьФайлКонтейнер(ПутьКФайлу, Том)
	
	Отказ = Ложь;
	
	внеш_хф_SelectelSwiftAPI.УдалениеФайла(ПутьКФайлу, Том, Отказ);
	
	Если Отказ Тогда
		внеш_хф_ВызватьИсключениеУдалениеФайла();
	КонецЕсли;
	
КонецПроцедуры


//-- рефакторинг
Функция внеш_хф_ДанныеФайлаСетеваяПапка(ПрисоединенныйФайл, СвойстваФайла, ВызыватьИсключение)
	
	Попытка
		Возврат Новый ДвоичныеДанные(ПолноеИмяФайлаВТоме(СвойстваФайла));
	Исключение
		
		внеш_хф_ВызватьИсключениеПолучениеФайла(ПрисоединенныйФайл, СвойстваФайла, ВызыватьИсключение);
		
	КонецПопытки;
	
КонецФункции

Функция внеш_хф_ДанныеФайлаКонтейнер(ПрисоединенныйФайл, СвойстваФайла, ВызыватьИсключение)
	
	Отказ = Ложь;
	
	ДвоичныеДанные = внеш_хф_SelectelSwiftAPI.СкачиваниеФайлаИзКонтейнера(ПолноеИмяФайлаВТоме(СвойстваФайла), ПрисоединенныйФайл.Том, Отказ);
	
	Если Отказ Тогда
		
		внеш_хф_ВызватьИсключениеПолучениеФайла(ПрисоединенныйФайл, СвойстваФайла, ВызыватьИсключение);
		
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
	
КонецФункции

Процедура внеш_хф_ВызватьИсключениеПолучениеФайла(ПрисоединенныйФайл, СвойстваФайла, ВызыватьИсключение)
	
	Если Не ВызыватьИсключение Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Получение файла из тома'", ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Ошибка,
	Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
	ПрисоединенныйФайл,
	СообщениеОбОшибке);
	
	ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Присоединен к %1 : %2'"),
	Строка(ТипЗнч(СвойстваФайла.ВладелецФайла)),
	СвойстваФайла.ВладелецФайла);
	
	ТекстОшибки = НСтр("ru = 'Не удалось открыть файл:
	|%1
	|который присоединен к:
	|%2
	|по причине: двоичные данные файла были удалены. Возможно, файл очищен как ненужный или удален антивирусной программой.
	|Обратитесь к администратору.'");
	
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	ТекстОшибки,
	СвойстваФайла.Наименование + "." + СвойстваФайла.Расширение,
	ПредставлениеВладельцаФайла);
	
	
КонецПроцедуры

Процедура внеш_хф_ВызватьИсключениеДобавлениеФайла(ПрисоединенныйФайл, ТомХранения, ПутьКТому)
	
	ШаблонОписанияОшибки = НСтр("ru = 'Ошибка при добавлении файла ""%1""
	|в том ""%2"" (%3):
	|""%4"".'");
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Добавление файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Ошибка,,,
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	ШаблонОписанияОшибки,
	ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение,
	Строка(ТомХранения),
	ПутьКТому,
	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОписанияОшибки,
		ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение,
		Строка(ТомХранения),
		ПутьКТому,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	Иначе
		
		// Сообщение обычному пользователю.
		СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось добавить файл:
		|""%1.%2"".
		|
		|Обратитесь к администратору.'"),
		ПрисоединенныйФайл.Наименование,
		ПрисоединенныйФайл.Расширение);
		
	КонецЕсли;
	
	ВызватьИсключение СтрокаИсключения;
	
	
КонецПроцедуры

Процедура внеш_хф_ВызватьИсключениеУдалениеФайла()
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'Файлы.Удаление файлов в томе'", ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Ошибка,
	,
	,
	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	
КонецПроцедуры



&Вместо("ПолноеИмяФайлаВТоме")
Функция внеш_хф_ПолноеИмяФайлаВТоме(СвойстваФайла, ДатаДляРазмещенияВТоме = Неопределено) Экспорт
	
	Разделитель = ПолучитьРазделительПути();
	
	КорневойКаталог = ПолныйПутьТома(СвойстваФайла.Том);
	Если Не ПустаяСтрока(СвойстваФайла.ПутьКФайлу) Тогда
		
		ПолноеИмяФайлаВТоме = КорневойКаталог + СвойстваФайла.ПутьКФайлу;
		Возврат ПолноеИмяФайлаВТоме; 
		
	Иначе
		
		КорневойКаталог = КорневойКаталог + ?(Прав(КорневойКаталог, 1) = Разделитель, "", Разделитель);
		Если СоздаватьПодкаталогиСИменамиВладельцев() Тогда
			КорневойКаталог = КорневойКаталог + ИмяКаталогаВладельцаФайла(СвойстваФайла.ВладелецФайла) + Разделитель;
		КонецЕсли;
		
		ДатаРазмещения = ?(ЗначениеЗаполнено(ДатаДляРазмещенияВТоме), ДатаДляРазмещенияВТоме, ТекущаяДатаСеанса());
		КорневойКаталог = КорневойКаталог + Формат(ДатаРазмещения, "ДФ=ггггММдд") + Разделитель;
		
		ИмяФайла = СвойстваФайла.Наименование
		+ ?(ЗначениеЗаполнено(СвойстваФайла.НомерВерсии), "." + СвойстваФайла.НомерВерсии, "")
		+ ?(СтрНайти(СвойстваФайла.Расширение, ".") > 0, СвойстваФайла.Расширение, "." + СвойстваФайла.Расширение);
		
		
		ПолноеИмяФайлаВТоме = КорневойКаталог
		+ РаботаСФайламиСлужебныйКлиентСервер.внеш_хф_ПолучитьУникальноеИмяСПутем(КорневойКаталог, ИмяФайла, СвойстваФайла.Том);
		
	КонецЕсли;
	
	Если СвойстваФайла.Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.SelectelSwiftAPI Тогда
		ПолноеИмяФайлаВТоме = СтрЗаменить(ПолноеИмяФайлаВТоме,"\", "/");		
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаВТоме; 
	
КонецФункции

&Вместо("ПолныйПутьТома")
Функция внеш_хф_ПолныйПутьТома(Том) Экспорт
	
	Если Не ЗначениеЗаполнено(Том.внеш_хф_ТипХранилища) ИЛИ (Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.СетеваяПапка) Тогда
		
		Возврат ПродолжитьВызов(Том);
		
	ИначеЕсли Том.внеш_хф_ТипХранилища = Перечисления.внеш_хф_ТипыХранилищ.SelectelSwiftAPI Тогда
		
		Возврат внеш_хф_SelectelSwiftAPI.ПолныйПутьТома(Том);
		
	КонецЕсли;
	
КонецФункции


//-- рефакторинг
Процедура внеш_хф_ЗаписатьФайлВИнформационнуюБазу(ПрисоединенныйФайл, ДвоичныеДанныеИлиПуть, ЗаполнятьСлужебныйРеквизитХранилище)
	
	СсылкаНаФайл = ПрисоединенныйФайл.Ссылка;
	Если Не ЗначениеЗаполнено(СсылкаНаФайл) Тогда
		МетаданныеПрисоединенныйФайл = ПрисоединенныйФайл.Метаданные(); // ОбъектМетаданных
		СсылкаНаФайл = Справочники[МетаданныеПрисоединенныйФайл.Имя].ПолучитьСсылку();
		ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНаФайл);
	КонецЕсли;
	
	ДанныеФайла = ?(ТипЗнч(ДвоичныеДанныеИлиПуть) = Тип("Строка"),
	Новый ДвоичныеДанные(ДвоичныеДанныеИлиПуть), ДвоичныеДанныеИлиПуть);
	РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(СсылкаНаФайл, ДанныеФайла);
	
	ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ПрисоединенныйФайл.Том = Неопределено;
	ПрисоединенныйФайл.ПутьКФайлу = "";
	
	Если ЗаполнятьСлужебныйРеквизитХранилище Тогда
		ПрисоединенныйФайл.ФайлХранилище = Новый ХранилищеЗначения(ДанныеФайла);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура внеш_хф_ЗаписатьФайлВСетеваяПапка(ПрисоединенныйФайл, ТомХранения, СвойстваФайла, ДатаДляРазмещенияВТоме, ДвоичныеДанныеИлиПуть, ЗаполнятьСлужебныйРеквизитХранилище)
	
	
	ПутьКТому = ПолныйПутьТома(ТомХранения);
	ПутьКФайлу = ПолноеИмяФайлаВТоме(СвойстваФайла, ДатаДляРазмещенияВТоме);
	
	Попытка
		
		Если ТипЗнч(ДвоичныеДанныеИлиПуть) = Тип("Строка") Тогда
			КопироватьФайл(ДвоичныеДанныеИлиПуть, ПутьКФайлу);
		Иначе
			ДвоичныеДанныеИлиПуть.Записать(ПутьКФайлу);
		КонецЕсли;
		
		ФайлНаДиске = Новый Файл(ПутьКФайлу);
		ФайлНаДиске.УстановитьУниверсальноеВремяИзменения(ПрисоединенныйФайл.ДатаМодификацииУниверсальная);
		ФайлНаДиске.УстановитьТолькоЧтение(Истина);
		
	Исключение
		
		внеш_хф_ВызватьИсключениеДобавлениеФайла(ПрисоединенныйФайл, ТомХранения, ПутьКТому);
				
	КонецПопытки;
	
	ПрисоединенныйФайл.ПутьКФайлу = Сред(ПутьКФайлу, СтрДлина(ПутьКТому) + 1);
	
	Если ЗаполнятьСлужебныйРеквизитХранилище Тогда
		ПрисоединенныйФайл.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;

	
КонецПроцедуры

//--

Процедура внеш_хф_ЗаписатьФайлВКонтейнер(ПрисоединенныйФайл, ТомХранения, СвойстваФайла, ДатаДляРазмещенияВТоме, ДвоичныеДанныеИлиПуть, ЗаполнятьСлужебныйРеквизитХранилище)
	
	Отказ = Ложь;
	
	ПутьКТому = ПолныйПутьТома(ТомХранения);
	ПутьКФайлу = ПолноеИмяФайлаВТоме(СвойстваФайла, ДатаДляРазмещенияВТоме);
	
	Если ТипЗнч(ДвоичныеДанныеИлиПуть) = Тип("Строка") Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ДвоичныеДанныеИлиПуть);
	Иначе
		ДвоичныеДанные = ДвоичныеДанныеИлиПуть;
	КонецЕсли;

	внеш_хф_SelectelSwiftAPI.ЗагрузкаФайлаВКонтейнер(ПутьКФайлу, ДвоичныеДанные, ТомХранения, Отказ);
	
	
	Если Отказ Тогда
		
		внеш_хф_ВызватьИсключениеДобавлениеФайла(ПрисоединенныйФайл, ТомХранения, ПутьКТому);
		
	КонецЕсли;
	
	ПрисоединенныйФайл.ПутьКФайлу = Сред(ПутьКФайлу, СтрДлина(ПутьКТому) + 1);
	
	
	//--
	
	Если ЗаполнятьСлужебныйРеквизитХранилище Тогда
		ПрисоединенныйФайл.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;

	
КонецПроцедуры
